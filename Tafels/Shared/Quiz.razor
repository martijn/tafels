@using BlafettisLib
@foreach (var sum in Round.Sums)
{
    @if (sum == Round.Sums.FirstOrDefault(s => !s.Correct))
    {
        <QuizSum @key="sum" Sum="@sum" onchange="@SumChange" ShowResult="@Round.ShowResults" @ref="_firstSum"/>
    }
    else
    {
        <QuizSum @key="sum" Sum="@sum" onchange="@SumChange" ShowResult="@Round.ShowResults"/>
    }
}

<Blafettis @ref="Blafettis" angle="70"/>

@if (Round.ShowResults)
{
    @if (Round.Completed)
    {
        @ChildContent
    }
    else
    {
        <Alert Visible="true">
            <AlertMessage>Bijna goed, verbeter je fouten om door te gaan!</AlertMessage>
        </Alert>
        <Button Size="Size.Large" Color="Color.Link" Clicked="Check">Controleren</Button>
    }
}
else
{
    <Button Size="Size.Large" Color="Color.Link" Clicked="Check">Controleren</Button>
}

@code {

    [Parameter]
    public EventCallback Check { get; set; }

    [Parameter]
    public Round Round { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private bool _confettiFired = false;

    private Blafettis Blafettis;
    private QuizSum _firstSum;

    private async Task SumChange()
    {
    // If user is correcting mistakes, show feedback immediately
        if (Round.ShowResults) await Check.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !Round.Completed && _firstSum is not null)
            await _firstSum.Focus();

        if (Round.ShowResults && !Round.Completed)
            Round.MistakesWereMade = true; // TODO Lift into class?

        if (Round.ShowResults && Round.Completed && !Round.MistakesWereMade && !_confettiFired)
        {
            _confettiFired = true;
            Blafettis.RaiseConfetti();
        }
    }

}